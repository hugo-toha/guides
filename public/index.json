[{"categories":null,"contents":"The Fetured Posts section is used to showcase any post you like. To enable this section, create a featured-posts.yaml file in the data/en/sections directory and include the following content:\n# section information section: name: Featured Posts # Title of section (default: \u0026#34;\u0026#34;) id: featured-posts # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 6 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar hideTitle: true # Can optionally hide the title in sections (default: false) # posts to feature posts: - quickstart - update-v3-to-v4 - prepare-site ","date":"February 6, 2024","hero":"/posts/configuration/sections/featured-posts/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/featured-posts/","summary":"The Fetured Posts section is used to showcase any post you like. To enable this section, create a featured-posts.yaml file in the data/en/sections directory and include the following content:\n# section information section: name: Featured Posts # Title of section (default: \u0026#34;\u0026#34;) id: featured-posts # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 6 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar hideTitle: true # Can optionally hide the title in sections (default: false) # posts to feature posts: - quickstart - update-v3-to-v4 - prepare-site ","tags":null,"title":"Configuring Featured Posts Section"},{"categories":null,"contents":"Ways to Contribute You can contribute to this theme in various ways.\nCode Pull requests are most welcome and I will be happy to review. Just follow the following principles:\nKeep it simple. Keep it consistent with the design of the UI. Use as few dependencies as possible. Be patient. Testing and reporting issues You can report a bug File a feature request share your thoughts Documentation You can also contribute to the theme documentation by:\nAdding information and sections. Fixing errors and typos. Updating obsolete documentation. Translating the documentation to a new language, this guide might be helpful. Translation Finally, you can contribute to the translation of the theme to several languages, by completing missing words, or by adding a new language. You can follow the guide How to add an unsupported language for more information.\nHow to contribute? For local development, you can make changes in the theme submodule and test the changes against your own site or this example site locally.\nFork At first, fork this repo. Then, follow the following steps to use the forked theme for local developments,\nRunning the forked theme against the example site If your want to run your local development against this example site, follow the following steps:\n# go to exampleSite directory $ cd exampleSite # install hugo modules $ hugo mod tidy # install dependencies $ hugo mod npm pack $ npm install # run the example site locally $ hugo server -w Now, you can make change in the theme and they will be reflected immediately on the running site. If you need to change any configuration, you can do that in the config.yaml file inside exampleSite folder. If you need to add any content or data, you can create the respective folder inside exampleSite directory and add your desired content or data there.\nRunning the forked theme against your own site If you want to run your local development against your own site, follow the following steps:\nReplace the theme module:\nOpen your site\u0026rsquo;s go.mod file and replace the github.com/hugo-toha/toha/v4 with your forked repo\u0026rsquo;s path. For example, if your forked repo is github.com/\u0026lt;your-github-user\u0026gt;/toha, then replace the github.com/hugo-toha/toha/v4 with github.com/\u0026lt;your-github-user\u0026gt;/toha/v4.\nmodule github.com/hugo-toha/hugo-toha.github.io go 1.19 require github.com/hugo-toha/toha/v4 v4.0.1-0.20231229170427-d3968ca711ef // indirect replace( github.com/hugo-toha/toha/v4 =\u0026gt; github.com/\u0026lt;your-github-user\u0026gt;/toha/v4 \u0026lt;git branch\u0026gt; ) For interactive development, you can replace the theme with your locally cloned fork. For example, if you have cloned your fork in /home/my-projects/toha, then replace the github.com/hugo-toha/toha/v4 with /home/my-projects/toha.\nmodule github.com/hugo-toha/hugo-toha.github.io go 1.19 require github.com/hugo-toha/toha/v4 v4.0.1-0.20231229170427-d3968ca711ef // indirect replace( github.com/hugo-toha/toha/v4 =\u0026gt; /home/my-projects/toha ) Update dependencies:\n# update hugo modules $ hugo mod tidy # install dependencies $ hugo mod npm pack $ npm install Run your site locally:\n$ hugo server -w From there you can make changes to the source code of the theme while testing with your running Hugo site or the example site.\nOpen a Pull Request When the changes look good, commit and push them to your fork.\n# stage all the changes $ git add . # commit the changes with a meaning full commit message $ git commit -m \u0026#34;A meaningful commit message\u0026#34; # push the commit to your fork $ git push my-fork my-feature-branch Then, open a PR against main branch of hugo-toha/toha from the my-feature-branch branch of your own fork.\n","date":"January 19, 2024","hero":"/posts/contributing/hero.png","permalink":"http://localhost:1313/posts/contributing/","summary":"Ways to Contribute You can contribute to this theme in various ways.\nCode Pull requests are most welcome and I will be happy to review. Just follow the following principles:\nKeep it simple. Keep it consistent with the design of the UI. Use as few dependencies as possible. Be patient. Testing and reporting issues You can report a bug File a feature request share your thoughts Documentation You can also contribute to the theme documentation by:","tags":null,"title":"How to Contribute?"},{"categories":null,"contents":"If you want to translate to an unsupported language, you can translate the UI elements.\nCreate an i18n file To do so, you have to create the i18n diretory inside the root of the site, the directory where you can find the config.yaml file, and directories like data, content, etc.\nAfterwards, you can create the file \u0026lt;language_code\u0026gt;.toml into the i18n directory. In this directory, you can find all language codes with the flag that will appear with that code.\nTranslate the UI elements Inside the new file, just copy the following content, and replace the content between the quotation marks with the name in your desired language.\nIf the content below gets obsolete, you can copy the contents from the en file. # More documentation here: https://github.com/nicksnyder/go-i18n [home] other = \u0026#34;Home\u0026#34; [posts] other = \u0026#34;Posts\u0026#34; [toc_heading] other = \u0026#34;Table of Contents\u0026#34; [tags] other = \u0026#34;Tags\u0026#34; [categories] other = \u0026#34;Categories\u0026#34; [at] other = \u0026#34;at\u0026#34; [resume] other = \u0026#34;My resume\u0026#34; [navigation] other = \u0026#34;Navigation\u0026#34; [contact_me] other = \u0026#34;Contact me:\u0026#34; [email] other = \u0026#34;Email\u0026#34; [phone] other = \u0026#34;Phone\u0026#34; [newsletter_text] other = \u0026#34;Stay up to date with email notification\u0026#34; [newsletter_input_placeholder] other = \u0026#34;Enter email\u0026#34; [newsletter_warning] other = \u0026#34;By entering your email address, you agree to receive the newsletter of this website.\u0026#34; [submit] other = \u0026#34;Submit\u0026#34; [hugoAttributionText] other = \u0026#34;Powered by\u0026#34; [prev] other = \u0026#34;Prev\u0026#34; [next] other = \u0026#34;Next\u0026#34; [share_on] other = \u0026#34;Share on\u0026#34; [improve_this_page] other = \u0026#34;Improve this page\u0026#34; [out_of] other = \u0026#34;out of\u0026#34; [publications] other = \u0026#34;Publications\u0026#34; [taken_courses] other = \u0026#34;Taken Courses\u0026#34; [course_name] other = \u0026#34;Course Name\u0026#34; [total_credit] other = \u0026#34;Total Credit\u0026#34; [obtained_credit] other = \u0026#34;Obtained Credit\u0026#34; [extracurricular_activities] other = \u0026#34;Extracurricular Activities\u0026#34; [show_more] other = \u0026#34;Show More\u0026#34; [show_less] other = \u0026#34;Show Less\u0026#34; [responsibilities] other = \u0026#34;Responsibilities:\u0026#34; [present] other = \u0026#34;Present\u0026#34; [comments_javascript] other = \u0026#34;Please enable JavaScript to view the\u0026#34; [comments_by] other = \u0026#34;comments powered by\u0026#34; [read] other = \u0026#34;Read\u0026#34; [project_star] other = \u0026#34;Star\u0026#34; [project_details] other = \u0026#34;Details\u0026#34; [err_404] other = \u0026#34;The page you are looking for is not there yet.\u0026#34; [more] other = \u0026#34;More\u0026#34; [view_certificate] other = \u0026#34;View Certificate\u0026#34; [notes] other = \u0026#34;Notes\u0026#34; [disclaimer_text] other = \u0026#34;Liability Notice\u0026#34; [search] other = \u0026#34;Search\u0026#34; [minute] one = \u0026#34;minute\u0026#34; other = \u0026#34;minutes\u0026#34; ","date":"January 15, 2024","hero":"/posts/translation/new-language/hero.jpg","permalink":"http://localhost:1313/posts/translation/new-language/","summary":"If you want to translate to an unsupported language, you can translate the UI elements.\nCreate an i18n file To do so, you have to create the i18n diretory inside the root of the site, the directory where you can find the config.yaml file, and directories like data, content, etc.\nAfterwards, you can create the file \u0026lt;language_code\u0026gt;.toml into the i18n directory. In this directory, you can find all language codes with the flag that will appear with that code.","tags":null,"title":"How to add an unsupported language"},{"categories":null,"contents":"This theme has built-in support for multiple language.\nBefore starting the post translation, make sure that you have enabled the language to your site. If that\u0026rsquo;s not the case, you can follow the section Add the language to the site from the guide How to Translate Site Data.\nCreating the post Once you have your desired language added to your website, know you can translate posts to that language. We\u0026rsquo;re going to assume that you want to translate an existing post.\nCreate the index file The first step is to locate the index.md file from the post that you want to translate. Then you have to create a file in the same directory (or you can just copy the index.md file), and name it index.\u0026lt;language_code\u0026gt;.md, where \u0026lt;language_code\u0026gt; is the language code that you can find in the language table in How to Translate Site Data.\nTranslate the post Now, you can start translating the post, the same way as you write a new post.\nINFO: If you\u0026rsquo;re dealing with internal references, you\u0026rsquo;ll need to add the prefix /\u0026lt;language_code\u0026gt; in front of your relative path. For example, if you want to create a link that is pointing to /posts/translation/site-data/, the link for the translated post will be /\u0026lt;language_code\u0026gt;/posts/translation/site-data/.\n","date":"January 15, 2024","hero":"/posts/translation/content/hero.jpg","permalink":"http://localhost:1313/posts/translation/content/","summary":"This theme has built-in support for multiple language.\nBefore starting the post translation, make sure that you have enabled the language to your site. If that\u0026rsquo;s not the case, you can follow the section Add the language to the site from the guide How to Translate Site Data.\nCreating the post Once you have your desired language added to your website, know you can translate posts to that language. We\u0026rsquo;re going to assume that you want to translate an existing post.","tags":null,"title":"How to Translate Posts"},{"categories":null,"contents":"This theme has built-in support for multiple language.\nAdd the language to the site Adding the language to your site will translate the UI to that language (e.g. the buttons, the nav bars, etc.).\nGet language code In order to translate your site, you will need the code from your language. The following table contains the supported languages algonside its codes:\nLanguages Code English en / none বাংলা bn Français fr Indonesian id Deutsch de Español es 简体中文 zh-cn / zh-tw हिन्दी hi Italiano it 日本語 jp 한국어 ko русский ru suomi fi Tiếng Việt vn Turkish tr Arabic (العربية) ar Português Europeu pt-pt Català ad Português Brasileiro pt-br Dutch nl For a complete list of the supported languages, please check the README file from the toha repository.\nIf the language you desire to translate the content to is not available, please check the guide How to add an unsupported language.\nAdd the language into config.yaml After you know what\u0026rsquo;s the code for the language you wish to translate your site, open config.yaml file, and under the languages section add the following:\nlanguages: en: languageName: English weight: 1 \u0026lt;language_code\u0026gt;: languageName: \u0026lt;language_name\u0026gt; weight: 2 # You can set the language order with this value For example, if we want to set Français as the new language, the section would look similar to:\nlanguages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 # You can set the language order with this value Translating the Main Page You can translate the main page by creating a new directory into data directory. The name of the new directory should be \u0026lt;language_code\u0026gt;. For example, if we want to translate it to french, we would create the fr directory into data directory.\nAfterwards you can create your usual data file like about.yaml or education.yaml files, keeping the same file structure and maintaining the same file names. Inside those files, you can just translate the content of the fields into your desired language.\nNext up You can check the following guide How to Translate Posts.\n","date":"January 15, 2024","hero":"/posts/translation/site-data/hero.jpg","permalink":"http://localhost:1313/posts/translation/site-data/","summary":"This theme has built-in support for multiple language.\nAdd the language to the site Adding the language to your site will translate the UI to that language (e.g. the buttons, the nav bars, etc.).\nGet language code In order to translate your site, you will need the code from your language. The following table contains the supported languages algonside its codes:\nLanguages Code English en / none বাংলা bn Français fr Indonesian id Deutsch de Español es 简体中文 zh-cn / zh-tw हिन्दी hi Italiano it 日本語 jp 한국어 ko русский ru suomi fi Tiếng Việt vn Turkish tr Arabic (العربية) ar Português Europeu pt-pt Català ad Português Brasileiro pt-br Dutch nl For a complete list of the supported languages, please check the README file from the toha repository.","tags":null,"title":"How to Translate Site Data"},{"categories":null,"contents":"If the default sections, templates, and components do not meet your needs, you can easily add new sections, templates, and components to your site. This guide will demonstrate how to add a new section to your site.\nStep 1 : Add Layout File To add a new section to your site, you need to create a layout file in the layouts/partials/sections directory. The file should be named after the section\u0026rsquo;s name. For example, if you want to add a contact section with a contact form, create a file named contact.html. Use the following template for the contact.html file:\n{{ $sectionID := replace (lower .section.name) \u0026#34; \u0026#34; \u0026#34;-\u0026#34; }} {{ if .section.id }} {{ $sectionID = .section.id }} {{ end }} \u0026lt;div class=\u0026#34;container anchor p-lg-5 about-section\u0026#34; id=\u0026#34;{{ $sectionID }}\u0026#34;\u0026gt; // Your custom HTML code here \u0026lt;/div\u0026gt; Step 2: Add CSS Styles If you want to add custom CSS for your new section, you can do so by adding the CSS code to the assets/styles/override.scss file in your site. This file is automatically loaded by the theme and will apply the custom styles. Alternatively, you can create a separate SCSS file in the assets/styles directory of your repository and include it in the assets/styles/override.scss file using the following syntax:\n@import \u0026#34;your-style-file-name\u0026#34;; Step 3: Add JavaScript Similarly, if your new section requires additional JavaScript, the recommended way is to add the JavaScript in the layout file itself with \u0026lt;script\u0026gt; tag. If you want to add the JavaScript in a separate file, then put the JavaScript file in assets/scripts directory of your repo and include it in the layout file as following:\n{{ $script := resources.Get \u0026#34;scripts/your-script.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ $script.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $script.Data.Integrity }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","date":"January 13, 2024","hero":"/posts/customizing/new-section/hero.png","permalink":"http://localhost:1313/posts/customizing/new-section/","summary":"If the default sections, templates, and components do not meet your needs, you can easily add new sections, templates, and components to your site. This guide will demonstrate how to add a new section to your site.\nStep 1 : Add Layout File To add a new section to your site, you need to create a layout file in the layouts/partials/sections directory. The file should be named after the section\u0026rsquo;s name.","tags":null,"title":"Adding a new section"},{"categories":null,"contents":"This theme allows you to customize the appearance of your site and its components by overriding the default CSS. This guide will demonstrate how to override the theme\u0026rsquo;s color scheme and customize the CSS of individual components.\nThis theme uses Sass to generate CSS. If you are not familiar with Sass, you can learn more about it from here.\nOverride Theme Colors Variables If you want to change the default color scheme of the theme, you can override the theme color variables. To override the theme color variables, you need to create a file named variables.scss in the assets/styles directory of your site. Then copy the content of the default variables.scss file and put into your custom variables.scss file. Here, only the $theme section from default variables.scss file is shown below:\n// themes $themes: ( \u0026#39;light\u0026#39;: ( // cyan 600 \u0026#39;accent-color\u0026#39;: #0891b2, // cyan 500 \u0026#39;hover-over-accent-color\u0026#39;: #06b6d4, // zinc 200 \u0026#39;text-over-accent-color\u0026#39;: #e4e4e7, // slate 50 \u0026#39;bg-primary\u0026#39;: #f8fafc, // slate 900 \u0026#39;bg-primary-inverse\u0026#39;: #0f172a, // slate 200 \u0026#39;bg-secondary\u0026#39;: #e2e8f0, \u0026#39;bg-card\u0026#39;: #fff, // slate 800 \u0026#39;heading-color\u0026#39;: #1e293b, // slate 700 \u0026#39;text-color\u0026#39;: #334155, // slate 300 \u0026#39;inverse-text-color\u0026#39;: #cbd5e1, // slate 500 \u0026#39;muted-text-color\u0026#39;: #64748b, // red 600 \u0026#39;inline-code-color\u0026#39;: #dc2626, // amber 200 \u0026#39;highlight-color\u0026#39;: #fde68a, // slate 900 \u0026#39;footer-color\u0026#39;: #0f172a, ), \u0026#39;dark\u0026#39;: ( // cyan 600 \u0026#39;accent-color\u0026#39;: #0891b2, // cyan 500 \u0026#39;hover-over-accent-color\u0026#39;: #06b6d4, // zinc 200 \u0026#39;text-over-accent-color\u0026#39;: #e4e4e7, // gray-800 \u0026#39;bg-primary\u0026#39;: #1f2937, // slate 900 \u0026#39;bg-primary-inverse\u0026#39;: #0f172a, // gray 900 \u0026#39;bg-secondary\u0026#39;: #111827, // slate 800 \u0026#39;bg-card\u0026#39;: #1e293b, // slate 100 \u0026#39;heading-color\u0026#39;: #f1f5f9, // slate 300 \u0026#39;text-color\u0026#39;: #cbd5e1, // slate 900 \u0026#39;inverse-text-color\u0026#39;: #0f172a, // slate 500 \u0026#39;muted-text-color\u0026#39;: #64748b, // red 600 \u0026#39;inline-code-color\u0026#39;: #dc2626, // amber 200 \u0026#39;highlight-color\u0026#39;: #fde68a, // slate 900 \u0026#39;footer-color\u0026#39;: #0f172a, ), ); The light and dark fields in the color mappings represent the color schemes for light mode and dark mode, respectively. By modifying the color codes in these fields, you can customize the look and feel of your site.\nOverride Component CSS To override the CSS of a component, create a override.scss file in your site\u0026rsquo;s assets/styles directory. Then, put the new CSS for the component there. You don\u0026rsquo;t have to re-write the entire CSS of the component. You can just put the changed fields.\nFor example, to disable blur effect of the background image on the home page, you can add the following SCSS code in your override.scss file:\n.home{ .background{ filter: none; } } ","date":"January 13, 2024","hero":"/posts/customizing/customize-css/hero.png","permalink":"http://localhost:1313/posts/customizing/customize-css/","summary":"This theme allows you to customize the appearance of your site and its components by overriding the default CSS. This guide will demonstrate how to override the theme\u0026rsquo;s color scheme and customize the CSS of individual components.\nThis theme uses Sass to generate CSS. If you are not familiar with Sass, you can learn more about it from here.\nOverride Theme Colors Variables If you want to change the default color scheme of the theme, you can override the theme color variables.","tags":null,"title":"Customizing CSS"},{"categories":null,"contents":"Toha V4 has introduced a lots of breaking changes in terms of how the theme is used and how it is configured. This guide will help you to migrate from v3 to v4 version of the theme. Please, check this release notes for complete changelog.\nIn this guide, I will walk you through the steps to migrate from version 3 to version 4 of the Toha theme. This guide is based on the migration guide written by Alexandre Neto in this issue. Let\u0026rsquo;s get started!\n1. Remove toha git submodule Toha V4 has made some changes to the installation process. One of the changes is that the theme no longer uses a git submodule. Therefore, we need to remove the toha git submodule. Don\u0026rsquo;t worry, this step will not remove any of your content.\ngit rm themes/toha/ git commit -m \u0026#34;Remove v3 theme\u0026#34; 2. Remove theme from config.yaml In the new version, we no longer need to specify the theme in the config.yaml file. Instead, we will add the theme as a module. Therefore, remove the following line from your config.yaml file:\ntheme: toha 3. Meet the requirements For building the site locally we will need to update/install the following requirements:\nHugo version v0.118.x (extended) or later. Go language version v1.18.x or later. Node version v18.x and npm version 8.x or later. Make sure you have installed all the required tools.\n4. Initialize Hugo Module Toha V4 now uses Hugo Module to manage the theme. To get going, we need to initialize the module.\nhugo mod init github.com/\u0026lt;your username\u0026gt;/\u0026lt;your repo name\u0026gt; This will create a go.mod file in the root of your site. You can check the file to see if it has been created properly.\n5. Add the theme as a module Now, add the following module section in your config.yaml file. This will add the theme as a module and also mount the static files from the theme.\n# Use Hugo modules to add theme module: imports: - path: github.com/hugo-toha/toha/v4 mounts: - source: static/files target: static/files - source: ./node_modules/flag-icon-css/flags target: static/flags - source: ./node_modules/@fontsource/mulish/files target: static/files - source: ./node_modules/katex/dist/fonts target: static/fonts 6. Update the config.yaml file In the new version, the configuration structure for managing features has been restructured. Therefore, it is necessary to update the config.yaml file. For reference, you can check the sample config.yaml. Here, we will highlight the most commonly used configurations that need to be changed.\nDark Mode:\nWe have introduced a new built-in dark mode support. As a result, there is no longer a need to use a third-party service like darkreader. To enable the new dark mode, please remove the following lines from your config.yaml file:\ndarkMode: provider: darkreader enable: true default: system Then, add the following lines under params.features section:\ndarkMode: enable: true Analytics:\nWe have restructured the configuration for analytics, comments, and support service providers. They are now placed under the services field of the respective section.\nTherefore, your previous analytics configuration will be updated from:\nanalytics: enabled: true google: id: UA-XXXXXXXXX-X to:\nanalytics: enable: true services: google: id: UA-XXXXXXXXX-X Comment:\nLikewise, your existing comments configuration will be transformed as follows:\ncomment: enable: true disqus: shortName: \u0026lt;your-disqus-shortname\u0026gt; to:\ncomment: enable: true services: disqus: shortName: \u0026lt;your-disqus-shortname\u0026gt; Support:\nAnd, your following support configuration will change from:\nsupport: enabled: true kofi: user: \u0026lt;your ko-fi user id\u0026gt; text: Tip Me textColor: \u0026#39;#f9fafc\u0026#39; backgroundColor: \u0026#39;#248aaa\u0026#39; to:\nsupport: enable: false services: kofi: user: hossainemruz text: Tip Me textColor: \u0026#39;#f9fafc\u0026#39; backgroundColor: \u0026#39;#248aaa\u0026#39; Other Changes:\nThere are few other options that have been changed. For examples:\nenableToc: true replaced by:\ntoc: enable: true Similarly:\nenableTags: true replaced by:\ntags: enable: true on_card: true Finally,\nshowFlags: true replace by:\n# Specify whether to show flag in the language selector. Default is true. flags: enable: true # # If you want to use different country flag for a language, specify them here. # flagOverwrites: # - languageCode: en # countryCode: us There have been a few other changes. Please refer to the sample configuration file for more details.\n7. Build the site Finally, you ready to build the theme. Please, execute the following steps to build the site:\na. Load Hugo modules\nhugo mod tidy b. Install node modules\nhugo mod npm pack npm install c. Run the site\nhugo server -w I hope this guide has been helpful in migrating your theme from V3 to V4. If you encounter any issues, please feel free to open an issue in the Github repository.\n","date":"January 5, 2024","hero":"/posts/update-v3-to-v4/hero.png","permalink":"http://localhost:1313/posts/update-v3-to-v4/","summary":"Toha V4 has introduced a lots of breaking changes in terms of how the theme is used and how it is configured. This guide will help you to migrate from v3 to v4 version of the theme. Please, check this release notes for complete changelog.\nIn this guide, I will walk you through the steps to migrate from version 3 to version 4 of the Toha theme. This guide is based on the migration guide written by Alexandre Neto in this issue.","tags":null,"title":"Migrate from V3 to V4 version"},{"categories":null,"contents":"Greeting! Thank you for deciding to use this theme. In this guide, I will show you how you can get started with this theme very quickly.\nHere, I am going to assume that you want to start a fresh Hugo site using this theme. If you are already using Hugo for your site, then you must know how to use a theme. In that case, please follow this sample repo for further reference.\nRequirements In order to run the theme locally, you must have the following tools installed.\nHugo version v0.118.x (extended) or later. Go language version v1.18.x or later. Node version v18.x and npm version 8.x or later. Make sure you have the required tools installed to the proper version using the following commands.\n# Check Hugo version ➜ hugo version hugo v0.118.2+extended linux/amd64 BuildDate=unknown # Check Go version ➜ go version go version go1.19.4 linux/amd64 # Check Node version ➜ node -v v18.12.1 # Check NPM version ➜ npm -v 8.19.2 Getting Started Now, let\u0026rsquo;s get back into our mission. Simply, follow these 5 steps to get started with your site.\nStep 1: Fork the example repo and rename At first, fork this sample repo to your account. Then, rename the repo to whatever you want. If you want to use Github Pages to deploy your site, then rename it to \u0026lt;your username\u0026gt;.github.io. The sample repo comes with pre-configured Github Actions to publish the site in Github Pages and Netlify.\nStep 2: Clone the forked repo locally Once you have forked and renamed the repository, you can now clone the forked repository in your local machine for further changes.\ngit clone git@github.com:\u0026lt;your username\u0026gt;/\u0026lt;forked repo name\u0026gt; Step 3: Update the module file You should see go.mod and go.sum files in the root of the repository. Update the first line of the go.mod file as below:\nmodule github.com/\u0026lt;your username\u0026gt;/\u0026lt;forked repo name\u0026gt; Step 4: Change config.yaml file Now, open the repository in an editor and change the following configurations in your config.yaml file located at the root of your repository.\nChange the baseURL At first change the baseURL to your site URL. If you want to use Github Pages to host your site, then set it as below:\nbaseURL: https://\u0026lt;your username\u0026gt;.github.io Change the gitRepo Now, change the gitRepo field under the params section to point to your forked repository. For example,\ngitRepo: https://github.com/\u0026lt;your username\u0026gt;/\u0026lt;your forked repo name\u0026gt; Disable analytics or configure it properly The sample repo comes with Google Analytics pre-configured. The analytics id point to the original site. So, either disable the analytics or configure it properly according to this guide.\nYou can disable the analytics by setting the following field under the params.features section:\nanalytics: enabled: false Disable news letter functionality The sample repo comes with a pre-configured mailchimp newsletter service. Disable it by setting the following field under the params.footer section.\nnewsletter: enable: false Step 5: Run the site locally Now, run the following commands to run your site locally:\na. Load Hugo modules\nhugo mod tidy b. Install node modules\nhugo mod npm pack npm install c. Run the site\nhugo server -w If everything goes right, you should see an output similar to this. Now, go to localhost:1313 in your browser and you should see your site running.\nStep 6: Push the changes to Github If you have come this far, it means your site is running locally without any issue. Let\u0026rsquo;s push these changes to Github.\n# stage all the changes git add . # commit the changes git commit -m \u0026#34;Initial site setup\u0026#34; -s # push the changes to Github git push origin HEAD What Next Customize the background, logo, and a few other things of your site by following this guide. Add information about you by following this guide. Add your skills information by following this guide. Add your experience information by following this guide. Deploy your site in Github Pages by following the guide from here. Deploy your site in Netlify by following the guide from here. ","date":"August 9, 2022","hero":"/posts/quickstart/hero.png","permalink":"http://localhost:1313/posts/quickstart/","summary":"Greeting! Thank you for deciding to use this theme. In this guide, I will show you how you can get started with this theme very quickly.\nHere, I am going to assume that you want to start a fresh Hugo site using this theme. If you are already using Hugo for your site, then you must know how to use a theme. In that case, please follow this sample repo for further reference.","tags":null,"title":"Quickstart"},{"categories":null,"contents":"To enable the dark mode in Toha v4.0.0, simply set the darkMode.enable field to true under the params.features section in your config.yaml file. For example:\nparams: features: darkMode: enable: true Congratulations! You are all set. You can now enjoy the dark mode in your site. The dark mode will obey user\u0026rsquo;s system preference.\n","date":"June 12, 2022","hero":"/posts/customizing/dark-theme/hero.png","permalink":"http://localhost:1313/posts/customizing/dark-theme/","summary":"To enable the dark mode in Toha v4.0.0, simply set the darkMode.enable field to true under the params.features section in your config.yaml file. For example:\nparams: features: darkMode: enable: true Congratulations! You are all set. You can now enjoy the dark mode in your site. The dark mode will obey user\u0026rsquo;s system preference.","tags":null,"title":"Enable Dark Theme"},{"categories":null,"contents":"This theme comes with built in mermaid support powered by mermaid-js. To enable mermaid for a page, you have to put mermaid: true in your page front-matter. For example, this page has the following front-matter:\ntitle: \u0026#34;Mermaid Support\u0026#34; date: 2022-03-14T06:15:35+06:00 menu: sidebar: name: Mermaid identifier: writing-post-mermaid parent: writing-post weight: 60 mermaid: true Then, you can use mermaid short code to add your mermaid content. For example:\n{{\u0026lt; mermaid align=\u0026#34;center\u0026#34;\u0026gt;}} # your mermaid content here {{\u0026lt; /mermaid \u0026gt;}} The mermaid short code accept the following parameters:\nalign: Let\u0026rsquo;s you align your diagram at left, right, or center. The default alignment is center. background: Let\u0026rsquo;s you change the background color of your diagram. In addition, you can also customize the theme of yours diagrams, for example:\n{{\u0026lt; mermaid align=\u0026#34;center\u0026#34; \u0026gt;}} %%{init: {\u0026#39;theme\u0026#39;:\u0026#39;default\u0026#39;}}%% # your mermaid content here {{\u0026lt; mermaid \u0026gt;}} The theme parameter accept the following values:\ndefault neutral dark forest base Examples Here, are few example of different diagram using mermaid.\nGraph {{\u0026lt; mermaid align=\u0026#34;left\u0026#34; \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Sequence Diagram {{\u0026lt; mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Gantt diagram {{\u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u0026lt; /mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Class Diagram {{\u0026lt; mermaid \u0026gt;}} classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label {{\u0026lt; /mermaid \u0026gt;}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Git Graph {{\u0026lt; mermaid background=\u0026#34;black\u0026#34; align=\u0026#34;right\u0026#34; \u0026gt;}} gitGraph: options { \u0026#34;nodeSpacing\u0026#34;: 150, \u0026#34;nodeRadius\u0026#34;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u0026lt; /mermaid \u0026gt;}} gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ER Diagram {{\u0026lt; mermaid \u0026gt;}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u0026lt; /mermaid \u0026gt;}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ","date":"March 14, 2022","hero":"/posts/writing-posts/mermaid/hero.svg","permalink":"http://localhost:1313/posts/writing-posts/mermaid/","summary":"This theme comes with built in mermaid support powered by mermaid-js. To enable mermaid for a page, you have to put mermaid: true in your page front-matter. For example, this page has the following front-matter:\ntitle: \u0026#34;Mermaid Support\u0026#34; date: 2022-03-14T06:15:35+06:00 menu: sidebar: name: Mermaid identifier: writing-post-mermaid parent: writing-post weight: 60 mermaid: true Then, you can use mermaid short code to add your mermaid content. For example:\n{{\u0026lt; mermaid align=\u0026#34;center\u0026#34;\u0026gt;}} # your mermaid content here {{\u0026lt; /mermaid \u0026gt;}} The mermaid short code accept the following parameters:","tags":null,"title":"Mermaid Support"},{"categories":null,"contents":"Comments This theme has built-in support for comment on the posts. Currently, it support the following comment plugins:\nDisqus Valine Utterances Giscus For a complete list of supported comments, please refer the sample config.yaml file.\nDisqus Disqus is a popular comment plug-in. After signing up to Disqus you will need to provide your shortname under params.features section of your config.yaml file as below:\ncomment: enable: true services: disqus: shortName: toha-example-site Valine Valine appears to be a Chinese comments comments plugin. You can enable valine comment plugin by adding valine section under params.features section as shown below:\ncomment: enable: true services: valine: appId: app-id appKey: app-key avatar: retro placeholder: Share your thought. lang: en recordIP: true enableQQ: true Utterances To enable Utterances comment plugin, at first go to utteranc.es. On the Configuration section, provide the necessary information. It will give you a script to include to your site. You just need to extract the respective information from the script and provide it under params.features section as below:\ncomment: enable: true services: utteranc: repo: your-repo/name issueTerm: title theme: github-light Giscus Giscus is based off Utterances, but uses GitHub Discussions as the backend. This requires you to allow have a public repository, and the Giscus app to use your repository. Setup instructions can be found at the Giscus home page.\nTo enable Giscus comment plugin, at first go to giscus.app. On the Configuration section, provide the necessary information. It will give you a script to include to your site. You just need to extract the respective information from the script and provide it under params.features section as below:\ncomment: enable: true services: giscus: repo: your-repo/name repoID: your-repo-id category: your-category categoryID: your-category-id theme: light map: url reaction: 1 metadata: 0 inputPosition: bottom crossOrigin: anonymous ","date":"March 14, 2022","hero":"/posts/comments/hero.svg","permalink":"http://localhost:1313/posts/comments/","summary":"Comments This theme has built-in support for comment on the posts. Currently, it support the following comment plugins:\nDisqus Valine Utterances Giscus For a complete list of supported comments, please refer the sample config.yaml file.\nDisqus Disqus is a popular comment plug-in. After signing up to Disqus you will need to provide your shortname under params.features section of your config.yaml file as below:\ncomment: enable: true services: disqus: shortName: toha-example-site Valine Valine appears to be a Chinese comments comments plugin.","tags":null,"title":"Comments"},{"categories":null,"contents":"","date":"March 14, 2022","hero":"/posts/external-link/hero.svg","permalink":"http://localhost:1313/posts/external-link/","summary":"","tags":null,"title":"External Link on Sidebar"},{"categories":null,"contents":"This theme supports adding various support/donation links in your site. Currently, supported support links are:\nKo-fi Buy Me a Coffee For a complete list of supported support links, please refer the sample config.yaml file.\nKo-fi You can add your Ko-fi floating button in your website. To add the floating button, add the support section under params.features section of your sites config.yaml file:\nsupport: enable: true services: kofi: user: \u0026lt;your ko-fi user id\u0026gt; text: Tip Me textColor: \u0026#39;#f9fafc\u0026#39; backgroundColor: \u0026#39;#248aaa\u0026#39; Buy Me a Coffee You can add your \u0026ldquo;Buy Me a Coffee\u0026rdquo; floating button in your website. To add the floating button, add the support section under params.features section of your sites config.yaml file:\nsupport: enable: true services: buymeacoffee: user: \u0026lt;your buymeacoffee.com user\u0026gt; text: Support me on Buy me a coffee! info: Buy me a coffee! color: \u0026#39;#FFDD00\u0026#39; ","date":"March 14, 2022","hero":"/posts/supports/hero.svg","permalink":"http://localhost:1313/posts/supports/","summary":"This theme supports adding various support/donation links in your site. Currently, supported support links are:\nKo-fi Buy Me a Coffee For a complete list of supported support links, please refer the sample config.yaml file.\nKo-fi You can add your Ko-fi floating button in your website. To add the floating button, add the support section under params.features section of your sites config.yaml file:\nsupport: enable: true services: kofi: user: \u0026lt;your ko-fi user id\u0026gt; text: Tip Me textColor: \u0026#39;#f9fafc\u0026#39; backgroundColor: \u0026#39;#248aaa\u0026#39; Buy Me a Coffee You can add your \u0026ldquo;Buy Me a Coffee\u0026rdquo; floating button in your website.","tags":null,"title":"Supports Links"},{"categories":null,"contents":" If you customize the layout of an existing component, you will not receive any future updates for that component when the theme is updated. You will need to manually update the component in your repository. In this tutorial, I will guide you on how to customize the layout of a theme. I have personally gone through the process and will share my insights to make it easier for you.\nStep 1 : Change the Layout File To customize the layout of an existing section, page, or component, you need to locate the corresponding file in the theme\u0026rsquo;s layout directory. Once you find the file, copy it and place it in the same directory structure within the layouts directory of your site.\nFor example, to customize the layout of the about section, follow these steps:\nCopy the about.html file from the layouts/partials/sections directory of the theme. Paste the copied file into the layouts/partials/sections directory of your repository. Edit the copied about.html file to make the desired layout changes for the about section. Step 2: Add CSS Styles If you need to add additional CSS to your modified layout file, you can do so by adding the CSS code to the assets/styles/override.scss file in your site. This file is automatically loaded by the theme and will apply the custom styles. If you want to add the CSS in a separate file, then put the CSS into a SCSS file in assets/styles directory of your repo and include it in the assets/styles/override.scss file as following:\n@import \u0026#34;your-style-file-name\u0026#34;; Step 3: Add JavaScript If your modified layout file requires additional JavaScript, the recommended way is to add the JavaScript in the layout file itself with \u0026lt;script\u0026gt; tag. If you want to add the JavaScript in a separate file, then put the JavaScript file in assets/scripts directory of your repo and include it in the layout file as following:\n{{ $script := resources.Get \u0026#34;scripts/your-script.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ $script.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $script.Data.Integrity }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","date":"August 7, 2021","hero":"/posts/customizing/customize-layout/hero.png","permalink":"http://localhost:1313/posts/customizing/customize-layout/","summary":"If you customize the layout of an existing component, you will not receive any future updates for that component when the theme is updated. You will need to manually update the component in your repository. In this tutorial, I will guide you on how to customize the layout of a theme. I have personally gone through the process and will share my insights to make it easier for you.","tags":null,"title":"Customizing the layout"},{"categories":null,"contents":"In this post, we are going to create a hugo site from scratch. Then, we will configure it with Toha theme, make it multilingual, add some example posts. At the end of this post, you should be able to run a fully functional hugo site with Toha theme locally.\nIf you want a head start, you can just fork hugo-toha/hugo-toha.github.io repo, rename it and update with your own data. This repo has already been configured to deploy in Github Pages and Netlify.\nCreate Repository At first, create a repository in Github. If you want to deploy this site in Github Pages, your repo named should be \u0026lt;your user name\u0026gt;.github.io. Clone the repository into your local machine and navigate into it.\nCreate Site Now, make sure that you have Hugo installed. This theme should work with hugo version v0.118.0 and later. Now, run the following command in the root of your repository to initiate a hugo website.\nhugo new site ./ --format=yaml --force This command will create a basic hugo site structure. Here, --format=yaml flag tells hugo to create configuration file in YAML format and --force flag forces hugo to create a site even if the target directory is not empty. It will create hugo.yaml file that will hold the all the necessary configurations for your site.\nAdd Theme We are going to use hugo module to add Toha theme into our site. At first, initialize hugo modules using the following command:\nhugo mod init github.com/\u0026lt;your user name\u0026gt;/\u0026lt;your repo name\u0026gt; This command will create a go.mod file in the root of your repository.\nThen, add the following module section in your hugo.yaml file:\nmodule: imports: - path: github.com/hugo-toha/toha/v4 mounts: - source: ./node_modules/flag-icon-css/flags target: static/flags - source: ./node_modules/@fontsource/mulish/files target: static/files - source: ./node_modules/katex/dist/fonts target: static/fonts Finally, run the following commands to download the theme and its dependencies:\n# download the theme hugo mod get -u # download the theme\u0026#39;s dependencies hugo mod tidy # generate node dependencies hugo mod npm pack # install install dependencies npm install Run Site Locally Now, you can already run your site locally. Let\u0026rsquo;s run the site in watch mode using the following command:\nhugo server -w If you navigate to http://localhost:1313, you should see a basic site with Toha theme. In the next section, we are going to configure the site to look like the hugo-toha.github.io. As we have run the server in watch mode, any changes we make to the site will be instantly visible in the browser.\nConfigure Site Now, we are ready to configure our site. In this section, we are going to add author information, different sections, and sample posts etc.\nUpdate hugo.yaml When you have created the site using hugo new site command, it has created a hugo.yaml file in the root of your repository. Replace the default content of the hugo.yaml file with the following:\nbaseURL: https://hugo-toha.github.io languageCode: en-us title: \u0026#34;John\u0026#39;s Blog\u0026#34; # Use Hugo modules to add theme module: imports: - path: github.com/hugo-toha/toha/v4 mounts: - source: static/files target: static/files - source: ./node_modules/flag-icon-css/flags target: static/flags - source: ./node_modules/@fontsource/mulish/files target: static/files - source: ./node_modules/katex/dist/fonts target: static/fonts # Manage languages # For any more details, you can check the official documentation: https://gohugo.io/content-management/multilingual/ languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 # Force a locale to be use, really useful to develop the application ! Should be commented in production, the \u0026#34;weight\u0026#34; should rocks. # DefaultContentLanguage: bn # Allow raw html in markdown file markup: goldmark: renderer: unsafe: true tableOfContents: startLevel: 2 endLevel: 6 ordered: false # At least HTML and JSON are required for the main HTML content and # client-side JavaScript search outputs: home: - HTML - RSS - JSON # Enable global emoji support enableEmoji: true # Site parameters params: # GitHub repo URL of your site gitRepo: https://github.com/hugo-toha/hugo-toha.github.io features: # Enable portfolio section portfolio: enable: true # Enable blog posts blog: enable: true # Enable Table of contents in reading page toc: enable: true # Configure footer footer: enable: true Here, you are seeing a basic configuration for Toha theme. You can see the configuration file used in the example site form here. For more detailed configuration options, please check this post.\nAdd Data Most of the contents of this theme is driven by some YAML files in data directory. In this section, we are going to add some sample data. Since, we\u0026rsquo;re building a multilingual site, we are going to keep the data for each language separate into their own locale folder.\nAt first, create en folder inside your data directory. We are going to add data for English language here.\nSite Information Now, create a site.yaml file inside /data/en/ directory of your repository. Add the following content there:\n# Copyright Notice copyright: © 2020 Copyright. # Meta description for your site. This will help the search engines to find your site. description: Portfolio and personal blog of John Doe. To see all the available options for site information, check this sample file.\nAuthor Information Now, create a author.yaml file in /data/en/ directory and add your information there as below:\n# some information about you name: \u0026#34;John Doe\u0026#34; nickname: \u0026#34;John\u0026#34; # greeting message before your name. it will default to \u0026#34;Hi! I am\u0026#34; if not provided greeting: \u0026#34;Hi, I am\u0026#34; image: \u0026#34;images/author/john.png\u0026#34; # give your some contact information. they will be used in the footer contactInfo: email: \u0026#34;johndoe@example.com\u0026#34; phone: \u0026#34;+0123456789\u0026#34; github: johndoe linkedin: johndoe # some summary about what you do summary: - I am a Developer - I am a Devops - I love servers - I work on open-source projects - I love to work with some fun projects Add Sections Now, we are going to add different sections into our home page. At first, create a sections folder inside your /data/en directory. Here, we are going to add few sections with minimum configurations. In order to see detailed configuration options for the sections, please visit here.\nAbout Section Create about.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: About id: about enable: true weight: 1 showOnNavbar: true template: sections/about.html # your designation designation: Software Engineer # your company information company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; # your resume. this file path should be relative to you \u0026#34;static\u0026#34; directory resume: \u0026#34;files/resume.pdf\u0026#34; # a summary about you summary: \u0026#39;I am a passionate software engineer with x years of working experience. I built OSS tools for [Kubernetes](https://kubernetes.io/) using GO. My tools help people to deploy their workloads in Kubernetes. Sometimes, I work on some fun projects such as writing a theme, etc.\u0026#39; # your social links # give as many as you want. use font-awesome for the icons. socialLinks: - name: Email icon: \u0026#34;fas fa-envelope\u0026#34; url: \u0026#34;example@gmail.com\u0026#34; - name: Github icon: \u0026#34;fab fa-github\u0026#34; url: \u0026#34;https://www.github.com/example\u0026#34; - name: Stackoverflow icon: \u0026#34;fab fa-stack-overflow\u0026#34; url: \u0026#34;#\u0026#34; - name: LinkedIn icon: \u0026#34;fab fa-linkedin\u0026#34; url: \u0026#34;#\u0026#34; - name: Twitter icon: \u0026#34;fab fa-twitter\u0026#34; url: \u0026#34;#\u0026#34; - name: Facebook icon: \u0026#34;fab fa-facebook\u0026#34; url: \u0026#34;#\u0026#34; # Show your badges # You can show your verifiable certificates from https://www.credly.com. # You can also show a circular bar indicating the level of expertise on a certain skill badges: - type: certification name: Certified Kubernetes Security Specialist url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/f4bf92ed-8985-40b2-bc07-2f9308780854/kubernetes-security-specialist-logo-examdev.png\u0026#34; - type: certification name: Istio and IBM Cloud Kubernetes Service url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/8d34d489-84bf-4861-a4a0-9e9d68318c5c/Beyond_basics_of_Istio_on_Cloud_v2.png\u0026#34; - type: certification name: Artificial Intelligence and Machine Learning url: \u0026#34;https://www.credly.com/org/grupo-bancolombia/badge/artificial-intelligence-and-machine-learning\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/e027514f-9d07-4b29-862f-fe21a8aaebf1/ae.png\u0026#34; - type: soft-skill-indicator name: Leadership percentage: 85 color: blue - type: soft-skill-indicator name: Team Work percentage: 90 color: yellow - type: soft-skill-indicator name: Hard Working percentage: 85 color: orange # you can also provide color code instead of the color name # - type: soft-skill-indicator # name: Example 1 # percentage: 75 # color: \u0026#34;#00adb5\u0026#34; Put the resume.pdf file in /static/files directory of your repository. You can find the about.yaml file used in the example site from here.\nAdd other sections In order to keep this post short, we have splitted it in different posts. Below there\u0026rsquo;s the list of posts that will show you how to configure the other sections:\nConfiguring About Section. Configuring Education Section. Configuring Experiences Section. Configuring Projects Section. Configuring Recent Posts Section. Configuring Achievements Section. Configuring Skills Section. Add Posts Now, we are ready add our first post into our site. Here, we are going to add this introduction post.\nAt first, create a posts folder inside content directory of your site. Then, create _index.md file inside the posts directory. Copy the content of this file file and paste into the newly created _index.md file. Create introduction folder inside your posts directory. Add the following hero.svg inside your introduction folder. Now, create index.md file inside the introduction folder. This index.md file will hold the post contents. Add the following sample contents in the newly created index.md file. Now, your post should appear at http://localhost:1313/posts and your Recent Posts section also should show this post card. For translating a post, just create a new file with name index.\u0026lt;language code\u0026gt;.md in the same directory. Then, add the translated content there.\nFor more sample posts, please visit here.\nWhat Next At this point, your site should look similar to the example site. Now, it\u0026rsquo;s time to deploy your site. You can follow the following deployments guides:\nDeploy in Github Pages Deploy in Netlify ","date":"June 8, 2020","hero":"/posts/getting-started/prepare-site/hero.jpg","permalink":"http://localhost:1313/posts/getting-started/prepare-site/","summary":"In this post, we are going to create a hugo site from scratch. Then, we will configure it with Toha theme, make it multilingual, add some example posts. At the end of this post, you should be able to run a fully functional hugo site with Toha theme locally.\nIf you want a head start, you can just fork hugo-toha/hugo-toha.github.io repo, rename it and update with your own data. This repo has already been configured to deploy in Github Pages and Netlify.","tags":null,"title":"Prepare Your Site"},{"categories":null,"contents":"In this post, we are going to deploy the site we have created in previous post in Github Pages. At first, make sure that your repository name is \u0026lt;your username\u0026gt;.github.io. Then, commit any local uncommitted changes and push into Github.\nCreate gh-pages Branch At first, create a new branch named gh-pages. Github will automatically set respective configurations for Github Pages when it see a branch with this name.\n# create the gh-pages branch $ git checkout -b gh-pages # push the source branch into Github $ git push gh-pages gh-pages Enable Github Action We are going to automate the deploying process using Github Actions. At first, make sure that Github Action is enabled in your repository. Go to Settings \u0026gt; Actions of your repository and make sure Action permissions is set to Allow all actions. Here, is a screenshot of the respective setting:\nAdd Workflow We are going to use peaceiris/actions-hugo action to set up hugo and peaceiris/actions-gh-pages to deploy the site. Create .github folder at the root of your repository. Then, create workflows folder inside the .github folder. Finally, create a deploy-site.yaml file inside the workflows folder and add the following content there:\nname: Deploy to Github Pages # run when a commit is pushed to \u0026#34;source\u0026#34; branch on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: # checkout to the commit that has been pushed - uses: actions/checkout@v3 - name: Setup Hugo uses: peaceiris/actions-hugo@v2.6.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Update Hugo Modules run: hugo mod tidy - name: Setup Node uses: actions/setup-node@v3 with: node-version: 18 - name: Install node modules run: | hugo mod npm pack npm install - name: Build run: hugo --minify # push the generated content into the `gh-pages` branch. - name: Deploy uses: peaceiris/actions-gh-pages@v3.9.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public This action will start on every push into the main branch. It will build the site and commit the generated content into gh-pages branch.\nDeploy If you have followed the guide properly, your site should be ready to deploy in Github Pages. Now, if you push any commit into your main branch, a Github Action will start and deploy your site automatically.\nPush a commit into the main branch and go to Actions tab of your repository to verify that the action has started.\nNow, wait for the actions to complete. If it completes successfully, you should see a green tick indicating successful run.\nOnce the Github Action has completed successfully, you can browse your site at https://\u0026lt;your username\u0026gt;.github.io.\nAdd custom domain name If you own a domain name and willing to use it in this website go to your domain name provider website. Then add the following Resource Records:\n@ 3600 IN A 185.199.108.153 @ 3600 IN A 185.199.109.153 @ 3600 IN A 185.199.110.153 @ 3600 IN A 185.199.111.153 WWW 3600 IN A 185.199.108.153 WWW 3600 IN A 185.199.109.153 WWW 3600 IN A 185.199.110.153 WWW 3600 IN A 185.199.111.153 To verify your domain to make sure nobody from Github can claim it except from you, you can follow the steps contained in this guide.\nFinally create a CNAME file inside /static directory of your repository. Add your domain name there:\nexample.com Once the Github Action has completed successfully, you can browse your site at https://\u0026lt;your domain name\u0026gt;.\nNote that by browsing to https://\u0026lt;your username\u0026gt;.github.io it will automaitcally redirect to https://\u0026lt;your domain name\u0026gt;.\n","date":"June 8, 2020","hero":"/posts/getting-started/github-pages/hero.jpg","permalink":"http://localhost:1313/posts/getting-started/github-pages/","summary":"In this post, we are going to deploy the site we have created in previous post in Github Pages. At first, make sure that your repository name is \u0026lt;your username\u0026gt;.github.io. Then, commit any local uncommitted changes and push into Github.\nCreate gh-pages Branch At first, create a new branch named gh-pages. Github will automatically set respective configurations for Github Pages when it see a branch with this name.\n# create the gh-pages branch $ git checkout -b gh-pages # push the source branch into Github $ git push gh-pages gh-pages Enable Github Action We are going to automate the deploying process using Github Actions.","tags":null,"title":"Deploy site in Github Pages"},{"categories":null,"contents":"Netlify offers an excellent and easy process for deploying hugo static site. You can deploy your site in matter of few clicks. Unlike Github Pages, you can name your repository whatever you want. You can also customize the site URL.\nIn this post, we will show the step-by-step process of deploying a hugo site with netlify.\nAdd Netlify Configuration At first, create a netlify.toml file at the root of your repository and add the following configuration there:\n[build] command = \u0026#34;hugo --gc --minify\u0026#34; publish = \u0026#34;public\u0026#34; [context.production.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_VERSION = \u0026#34;0.120.1\u0026#34; NODE_VERSION = \u0026#34;v18.12.1\u0026#34; NPM_VERSION = \u0026#34;8.19.2\u0026#34; [context.split1] command = \u0026#34;hugo mod tidy \u0026amp;\u0026amp; hugo mod npm pack \u0026amp;\u0026amp; npm install \u0026amp;\u0026amp; hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_ENV = \u0026#34;production\u0026#34; HUGO_VERSION = \u0026#34;0.120.1\u0026#34; NODE_VERSION = \u0026#34;v18.12.1\u0026#34; NPM_VERSION = \u0026#34;8.19.2\u0026#34; [context.deploy-preview] command = \u0026#34;hugo mod tidy \u0026amp;\u0026amp; hugo mod npm pack \u0026amp;\u0026amp; npm install \u0026amp;\u0026amp; hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.120.1\u0026#34; NODE_VERSION = \u0026#34;v18.12.1\u0026#34; NPM_VERSION = \u0026#34;8.19.2\u0026#34; [context.branch-deploy] command = \u0026#34;hugo mod tidy \u0026amp;\u0026amp; hugo mod npm pack \u0026amp;\u0026amp; npm install \u0026amp;\u0026amp; hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.120.1\u0026#34; NODE_VERSION = \u0026#34;v18.12.1\u0026#34; NPM_VERSION = \u0026#34;8.19.2\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; Commit and push the netlify.toml file into Github. Now, you are ready to deploy your site with netlify.\nDeploy Site Now, login into netlify. Then, go to Sites tab of your netlify dashboard and click New site form Git button.\nA new popup will open. Select Github and authenticate, with your Github account.\nAfter authenticating, it will ask to select your desired repository. Select the repository you are using for your site.\nNow, netlify will take you to the deployment page. Select the branch you want to deploy. Netlify should automatically populate the required fields from the netlify.toml file you created earlier in this post. When you are satisfied with the configurations, press the Deploy button.\nNow, netlify will start publishing your site immediately. Wait for the publishing process to complete. Once, the site has been published, you can browse your site at the URL automatically generated by netlify. The auto-generated URL has been pointed out by a red rectangle in the screenshot below.\nCustomize URL You can easily customize the URL of your site with just few clicks as shown below.\nClick the Domain Setting button under Site Overview tab. Now, you can either add your own domain by clicking on Add custom domain button or you can just use \u0026lt;your custom prefix\u0026gt;.netlify.app domain. Here, we are going with the later. Click the options dropdown and select Edit site name. Then, give your site whatever name you want. Once you have saved the new name, you will see the URL of your site has been updated instantly. Now, you can browse your site at the new URL. ","date":"June 8, 2020","hero":"/posts/getting-started/netlify/hero.png","permalink":"http://localhost:1313/posts/getting-started/netlify/","summary":"Netlify offers an excellent and easy process for deploying hugo static site. You can deploy your site in matter of few clicks. Unlike Github Pages, you can name your repository whatever you want. You can also customize the site URL.\nIn this post, we will show the step-by-step process of deploying a hugo site with netlify.\nAdd Netlify Configuration At first, create a netlify.toml file at the root of your repository and add the following configuration there:","tags":null,"title":"Deploy site in Netlify"},{"categories":null,"contents":"To ensure your site benefits from the most recent features and corrections, it\u0026rsquo;s crucial to keep it updated with the latest theme version. This article will guide you through the process of establishing a GitHub workflow that will automatically update the theme version. This action will perform daily checks for any updates to the theme. If an update is detected, it will generate a PR to update your site to the most recent theme version.\nSetup Github Workflow Now, create a theme-update.yml file in the .github/workflows folder of your repository with the following content:\nname: \u0026#34;Theme Update\u0026#34; on: schedule: - cron: \u0026#34;0 0 * * *\u0026#34; jobs: update-theme: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4.1.1 with: ref: main - name: Setup Node uses: actions/setup-node@v4 with: node-version: 18 - name: Setup Hugo uses: peaceiris/actions-hugo@v2.6.0 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Update hugo modules run: | # update to latest version of all modules hugo mod get -u # update the npm dependencies hugo mod npm pack # cleanup go.sum file hugo mod tidy - name: Install node modules run: npm install - name: Build run: | # build the site hugo --minify # remove file generated by the build rm -rf public/ - name: Create Pull Request uses: peter-evans/create-pull-request@v5 with: base: main title: Update theme labels: automerge You\u0026rsquo;re good to go. From now on, this action will execute on a daily basis and generate a Pull Request if any updates to the theme are detected.\n","date":"June 8, 2020","hero":"/posts/getting-started/theme-update/hero.svg","permalink":"http://localhost:1313/posts/getting-started/theme-update/","summary":"To ensure your site benefits from the most recent features and corrections, it\u0026rsquo;s crucial to keep it updated with the latest theme version. This article will guide you through the process of establishing a GitHub workflow that will automatically update the theme version. This action will perform daily checks for any updates to the theme. If an update is detected, it will generate a PR to update your site to the most recent theme version.","tags":null,"title":"Automate Theme Update"},{"categories":null,"contents":"Test Link\nThis theme has been designed from a personal point of preference. As a developer, I want to organize my portfolio in a way that will reflect my skills best. So, this theme may or may not meet your needs but I will be happy to have your feedback.\nThis post will give you an overview of the features that this theme incorporates.\nMinimalist Design This theme has been designed to be minimalist and beautiful. The color scheme has been chosen to be simple but yet powerful. The post page has been designed to be as distraction-free as possible. Thanks to Anup Deb for his design guidance.\nResponsive The theme is fully responsive. It looks beautiful and consistent across Desktop, Laptop, Tablet, and Mobile devices.\nCarefully Designed Cards The skill and project cards are designed carefully to give more meaningful information. The skill cards not only just list your skills. It also gives the viewer an idea about your depth of knowledge of the particular skill. The project cards give an idea about the popularity of your project if it is an open-source project on Github.\nAn Experience Timeline that truly represents your experiences The experience timeline has been designed to reflect your career background. It shows the responsibilities you have handled in various stages of your career.\nA Gallery to show your Achievements The gallery section allows you to show your achievements to the public.\nA sidebar that makes sense Did you ever find yourself spending lots of time to find a particular post on a blog? I did it too. This theme incorporates a sidebar menu that categorizes your posts in various categories and sub-categories.\nCustomizability \u0026amp; Extensibility It is easy to customize the theme without changing the theme codes. It has been designed to be extensible and customizable. You can easily add a new section or overwrite the CSS of any existing sections without altering the theme.\nStill not meeting your requirements? File a feature request here.\nMultiple Language Support This theme has built-in support for multiple language. You can translate your content in multiple languages easily for better reachability.\n","date":"June 8, 2020","hero":"/posts/features/hero.png","permalink":"http://localhost:1313/posts/features/","summary":"Test Link\nThis theme has been designed from a personal point of preference. As a developer, I want to organize my portfolio in a way that will reflect my skills best. So, this theme may or may not meet your needs but I will be happy to have your feedback.\nThis post will give you an overview of the features that this theme incorporates.\nMinimalist Design This theme has been designed to be minimalist and beautiful.","tags":null,"title":"Features"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nSuccess Code:\n{{\u0026lt; alert type=\u0026#34;success\u0026#34; \u0026gt;}} This is sample alert with `type=\u0026#34;success\u0026#34;`. {{\u0026lt; /alert \u0026gt;}} Result:\nThis is sample alert with type=\u0026quot;success\u0026quot;. Danger Code:\n{{\u0026lt; alert type=\u0026#34;danger\u0026#34; \u0026gt;}} This is sample alert with `type=\u0026#34;danger\u0026#34;`. {{\u0026lt; /alert \u0026gt;}} Result:\nThis is sample alert with type=\u0026quot;danger\u0026quot;. Warning Code:\n{{\u0026lt; alert type=\u0026#34;warning\u0026#34; \u0026gt;}} This is sample alert with `type=\u0026#34;warning\u0026#34;`. {{\u0026lt; /alert \u0026gt;}} Result:\nThis is sample alert with type=\u0026quot;warning\u0026quot;. Info Code:\n{{\u0026lt; alert type=\u0026#34;info\u0026#34; \u0026gt;}} This is sample alert with `type=\u0026#34;info\u0026#34;`. {{\u0026lt; /alert \u0026gt;}} Result:\nThis is sample alert with type=\u0026quot;info\u0026quot;. Image A sample image without any attribute. Code:\n{{\u0026lt; img src=\u0026#34;/posts/shortcodes/boat.jpg\u0026#34; title=\u0026#34;A boat at the sea\u0026#34; \u0026gt;}} Result:\nA sample image with height and width attributes. Code:\n{{\u0026lt; img src=\u0026#34;/posts/shortcodes/boat.jpg\u0026#34; height=\u0026#34;400\u0026#34; width=\u0026#34;600\u0026#34; title=\u0026#34;A boat at the sea\u0026#34; \u0026gt;}} Result:\nA center aligned image with height and width attributes. Code:\n{{\u0026lt; img src=\u0026#34;/posts/shortcodes/boat.jpg\u0026#34; height=\u0026#34;400\u0026#34; width=\u0026#34;600\u0026#34; align=\u0026#34;center\u0026#34; title=\u0026#34;A boat at the sea\u0026#34; \u0026gt;}} Result:\nA image with float attribute. Code:\n{{\u0026lt; img src=\u0026#34;/posts/shortcodes/boat.jpg\u0026#34; height=\u0026#34;200\u0026#34; width=\u0026#34;500\u0026#34; float=\u0026#34;right\u0026#34; title=\u0026#34;A boat at the sea\u0026#34; \u0026gt;}} Result:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nSplit This theme support splitting the page into as many columns as you wish.\nTwo column split Code:\n{{\u0026lt; split 6 6 \u0026gt;}} ##### Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. --- ##### Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. {{\u0026lt; /split \u0026gt;}} Result:\nLeft Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.\nRight Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.\nThree column split Code:\n{{\u0026lt; split 4 4 4 \u0026gt;}} ##### Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. --- ##### Middle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum. --- ##### Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. {{\u0026lt; /split \u0026gt;}} Result:\nLeft Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.\nMiddle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum.\nRight Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.\nVertical Space Give vertical space between two lines.\nCode:\nThis is line one. {{\u0026lt; vs 4\u0026gt;}} This is line two. It should have `4rem` vertical space with previous line. Result:\nThis is line one. This is line two. It should have 4rem vertical space with previous line.\nVideo Code:\n{{\u0026lt; video src=\u0026#34;/videos/sample.mp4\u0026#34; \u0026gt;}} Result:\nVideo by Rahul Sharma from Pexels.\n","date":"June 8, 2020","hero":"/posts/shortcodes/boat.jpg","permalink":"http://localhost:1313/posts/shortcodes/","summary":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nSuccess Code:\n{{\u0026lt; alert type=\u0026#34;success\u0026#34; \u0026gt;}} This is sample alert with `type=\u0026#34;success\u0026#34;`. {{\u0026lt; /alert \u0026gt;}} Result:\nThis is sample alert with type=\u0026quot;success\u0026quot;. Danger Code:\n{{\u0026lt; alert type=\u0026#34;danger\u0026#34; \u0026gt;}} This is sample alert with `type=\u0026#34;danger\u0026#34;`. {{\u0026lt; /alert \u0026gt;}} Result:\nThis is sample alert with type=\u0026quot;danger\u0026quot;. Warning Code:","tags":null,"title":"Shortcodes"},{"categories":null,"contents":"After installing this theme, when you first run your site, it will start with the default parameters. It should look similar to this example site, but it won\u0026rsquo;t have any sections on the homepage. Don\u0026rsquo;t worry, you can easily add those sections by providing the necessary data files.\nIn the upcoming posts, I\u0026rsquo;ll guide you on how to add those sections and customize your site. But first, let\u0026rsquo;s start with changing the site parameters. You can modify the background, logo, author information, and enable/disable various features.\nFor a comprehensive list of available configuration parameters, please refer to the example site.\nAdd Background Image At first, let\u0026rsquo;s set a background on your website. Put your desired background image in the assets/images directory. Then add the following in the params section of your config.yaml file.\nbackground: \u0026#34;images/name-of-your-background-image.jpg\u0026#34; Add Site\u0026rsquo;s Logo To add logos for your site, you need two different logos: one for the transparent navbar and another for the non-transparent navbar. Place your logos in the assets/images directory and add the following code under the params section of your config.yaml file.\n# The inverted logo will be used in the initial transparent navbar and # the main logo will be used in the non-transparent navbar. logo: main: images/main-logo.png inverted: images/inverted-logo.png favicon: images/favicon.png Enable Blog Post To enable blog posting on your site, you need to make some changes in the config.yaml file. Locate the params.features section and add the following code:\n# Enable and configure blog posts blog: enable: true showAuthor: true # shows the post author (defaults true) Enable Table Of Contents Now, if you want to show Table Of Contents section in your blog post, you have to enable it in the params.features section of config.yaml file.\ntoc: enable: true You can also control the level of your TOC by adding the following configuration in the markup section of your config.yaml file.\nmarkup: tableOfContents: startLevel: 2 endLevel: 6 ordered: false Here, we have configured our TOC to show all headings from h2 to h6.\nEnable \u0026lt;Improve This Page\u0026gt; Button If you want to allow readers to easily improve a post by making corrections such as fixing typos or indentation, you can enable the \u0026lt;Improve This Page\u0026gt; button. To do this, add your git repository URL in the params section of your config.yaml file.\ngitRepo: \u0026lt;your site\u0026#39;s Github repo URL\u0026gt; This will add a button labeled Improve This Page at the bottom of every blog post. The button will route the user directly to the respective edit page in Github.\nIf your default branch is not named main, you need to specify your git default branch in the params section of your config.yaml file.\ngitBranch: \u0026lt;your git default branch name\u0026gt; Enable Newsletter To enable the newsletter feature, you need to provide the necessary parameters under the params.footer section in your config.yaml file. Currently, the newsletter feature only supports the Mailchimp provider. Here is an example of how it should look:\nnewsletter: enable: true provider: mailchimp mailchimpURL: https://github.us1.list-manage.com/subscribe/post?u=19de52a4603135aae97163fd8\u0026amp;amp;id=094a24c76e To disable the newsletter feature, you can set the following configuration:\nnewsletter: enable: false Enable RAW HTML in the Markdown File If you want to include RAW HTML in your markdown files, you need to enable unsafe rendering. Without enabling this, Hugo will not render the HTML. To enable unsafe markdown rendering, add the following goldmark settings to the markup section of your config.yaml file.\nmarkup: goldmark: renderer: unsafe: true Add Author Information Now, provide your basic information. Create a author.yaml file in your /data/en directory and add the author information there.\n# some information about you name: \u0026#34;Jane Doe\u0026#34; nickname: \u0026#34;Jane\u0026#34; image: \u0026#34;images/avatar.png\u0026#34; # greeting message before your name. it will default to \u0026#34;Hi! I am\u0026#34; if not provided greeting: \u0026#34;Hi, I am\u0026#34; # give your contact information. they will be used in the footer contactInfo: email: \u0026#34;janedoe@example.com\u0026#34; phone: \u0026#34;+0123456789\u0026#34; stack-overflow: icon: stack-overflow url: \u0026#34;https://stackoverflow.com/users/1/exampleUser\u0026#34; text: \u0026#34;ExampleUser\u0026#34; # a summary of what you do summary: - I am a Developer - I work with Go - I love to work with some fun projects Note: The contactInfo parameters will use the icon field to find the respective icon. Make sure the icon field matches the font awesome icon names. You can find examples here.\nAdd Copyright Notice To add a copyright notice for your site, create a site.yaml file in your /data/en directory. Add the following section to the file:\ncopyright: © 2024 Copyright. Site\u0026rsquo;s Description To add a description of your site that will help search engines find your site, you need to add a description section in your site.yaml file.\n# Meta description for your site. This will help the search engines to find your site. description: Example site for hugo theme Toha. Add Custom Menus To add custom menus in the navbar, you can modify the site.yaml file. By default, custom menus are visible in the navigation bar. To hide a custom menu, set the hideFromNavbar property to true. By default, custom menus are hidden from the footer\u0026rsquo;s navigation area. To show a custom menu item in the footer, set its showOnFooter property to true. This is particularly helpful when you want to add a link to another site in the navbar.\ncustomMenus: - name: Notes url: https://hossainemruz.gitbook.io/notes/ hideFromNavbar: false showOnFooter: true Now, you can run your site and see the changes. In the upcoming posts, I\u0026rsquo;ll guide you on how to add sections to your homepage and customize your site further.\n","date":"June 8, 2020","hero":"/posts/configuration/site-parameters/hero.svg","permalink":"http://localhost:1313/posts/configuration/site-parameters/","summary":"After installing this theme, when you first run your site, it will start with the default parameters. It should look similar to this example site, but it won\u0026rsquo;t have any sections on the homepage. Don\u0026rsquo;t worry, you can easily add those sections by providing the necessary data files.\nIn the upcoming posts, I\u0026rsquo;ll guide you on how to add those sections and customize your site. But first, let\u0026rsquo;s start with changing the site parameters.","tags":null,"title":"Configuring Site Parameters"},{"categories":null,"contents":"The purpose of the About section is to provide a brief introduction about yourself on your website. In this post, we will guide you on how to configure the About section. For a complete reference, please check out the sample about.yaml file.\nTo get started, create an about.yaml file in the data/en/sections directory of your website. Then, follow the instructions below.\nAdd Section information section: name: About # Title of section (default: \u0026#34;\u0026#34;) id: about # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 1 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar template: sections/about.html # allows you to point to a specific template. Template setting You have the option to customize the partial used for this section by specifying the template property. Simply save the new template in your layout/partials directory.\nAdd Your Work Information To include details about your current job, you can add the following section to your about.yaml file:\n# your designation designation: Software Engineer # your company information company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; Add a Summary About Yourself To provide a concise overview of your professional expertise, let\u0026rsquo;s add a summary section. This will give viewers a quick glimpse into what you do. Add the following section to your about.yaml file:\n# a summary about you summary: \u0026#39;I am a passionate software engineer with x years of working experience. I built OSS tools for [Kubernetes](https://kubernetes.io/) using GO. My tools help people to deploy their workloads in Kubernetes. Sometimes, I work on some fun projects such as writing a theme, etc.\u0026#39; Try to make it as brief as possible. Don\u0026rsquo;t make it too wordy. We have other sections that give more insight into your expertise.\nYou can use markdown syntax in the summary field.\nAdd Your Social Links To add links to your various profiles such as LinkedIn, Twitter, and Github, include the following socialLinks section in your about.yaml file:\n# your social links # give as many as you want. use font-awesome for the icons. socialLinks: - name: Email icon: \u0026#34;fas fa-envelope\u0026#34; url: \u0026#34;example@gmail.com\u0026#34; - name: Github icon: \u0026#34;fab fa-github\u0026#34; url: \u0026#34;https://www.github.com/example\u0026#34; - name: Stackoverflow icon: \u0026#34;fab fa-stack-overflow\u0026#34; url: \u0026#34;#\u0026#34; - name: LinkedIn icon: \u0026#34;fab fa-linkedin\u0026#34; url: \u0026#34;#\u0026#34; - name: Twitter icon: \u0026#34;fab fa-twitter\u0026#34; url: \u0026#34;#\u0026#34; - name: Facebook icon: \u0026#34;fab fa-facebook\u0026#34; url: \u0026#34;#\u0026#34; You can use any Font Awesome free icons in the icon field.\nAdd a Resume To add your resume, place the PDF file in files folder within the static directory. Then, include the following section in your about.yaml file:\n# your resume. this file path should be relative to you \u0026#34;static\u0026#34; directory resourceLinks: - title: \u0026#34;My Resume\u0026#34; url: \u0026#34;files/resume.pdf\u0026#34; Add badges Now, let\u0026rsquo;s add your badges and a strength indicator for various soft skills such as leadership, communication, teamwork, etc. Include the following section in your about.yaml file:\n# Show your badges # You can show your verifiable certificates from https://www.credly.com. # You can also show a circular bar indicating the level of expertise on a certain skill badges: - type: certification name: Certified Kubernetes Security Specialist url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/f4bf92ed-8985-40b2-bc07-2f9308780854/kubernetes-security-specialist-logo-examdev.png\u0026#34; - type: certification name: Istio and IBM Cloud Kubernetes Service url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/8d34d489-84bf-4861-a4a0-9e9d68318c5c/Beyond_basics_of_Istio_on_Cloud_v2.png\u0026#34; - type: certification name: Artificial Intelligence and Machine Learning url: \u0026#34;https://www.credly.com/org/grupo-bancolombia/badge/artificial-intelligence-and-machine-learning\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/e027514f-9d07-4b29-862f-fe21a8aaebf1/ae.png\u0026#34; - type: soft-skill-indicator name: Leadership percentage: 85 color: blue - type: soft-skill-indicator name: Team Work percentage: 90 color: yellow - type: soft-skill-indicator name: Hard Working percentage: 85 color: orange Currently, the skill percentage should be between 0 and 100 and should be divisible by 5. The following colors are available for skills percentage indicator,\nblue yellow pink green You can also use any HEX color code in the color field.\nThe following image shows how the contents of about.yaml are mapped into the About section. (The configuration portion of the image is outdated and softSkills section has been replaced with badges)\n","date":"June 8, 2020","hero":"/posts/configuration/sections/about/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/about/","summary":"The purpose of the About section is to provide a brief introduction about yourself on your website. In this post, we will guide you on how to configure the About section. For a complete reference, please check out the sample about.yaml file.\nTo get started, create an about.yaml file in the data/en/sections directory of your website. Then, follow the instructions below.\nAdd Section information section: name: About # Title of section (default: \u0026#34;\u0026#34;) id: about # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 1 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar template: sections/about.","tags":null,"title":"Configuring About Section"},{"categories":null,"contents":"The Skills section is designed to showcase your skills and provide insights into your expertise in each skill. In this post, we will guide you on how to configure the Skills section of your site. For a complete reference, please check out the sample skills.yaml file.\nTo begin, create a skills.yaml file in the data/en/sections directory of your site. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your skills.yaml file:\n# section information section: name: Skills id: skills enable: true weight: 2 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true Add Your Skills To add a skill add it\u0026rsquo;s information under skills section in your skills.yaml file as bellow:\n# Your Skills. # Give a summary of you each skill in the summary section. skills: - name: Kubernetes logo: /images/sections/skills/kubernetes.png summary: \u0026#34;Capable of deploying, managing application on Kubernetes. Experienced in writing Kubernetes controllers for CRDs.\u0026#34; url: \u0026#34;https://kubernetes.io/\u0026#34; Here, you have to provide the name, log, and summary fields for a skill. The summary field should provide an idea about your depth of knowledge of this particular skill.\nYou can use markdown syntax in the summary field.\nThe following image shows how the content of skills.yaml files are mapped into the Skills section.\n","date":"June 8, 2020","hero":"/posts/configuration/sections/skills/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/skills/","summary":"The Skills section is designed to showcase your skills and provide insights into your expertise in each skill. In this post, we will guide you on how to configure the Skills section of your site. For a complete reference, please check out the sample skills.yaml file.\nTo begin, create a skills.yaml file in the data/en/sections directory of your site. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your skills.","tags":null,"title":"Configuring Skills Section"},{"categories":null,"contents":"The Education section is designed to showcase your academic background. In this post, we will guide you on how to configure the Education section of your site. For a complete reference, you can refer to the sample education.yaml file.\nTo begin, create a new file named education.yaml in the data/en/sections directory of your site. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your education.yaml file:\n# section information section: name: Education id: education template: sections/education.html # Use \u0026#34;sections/education-alt.html for alternate template. enable: true weight: 4 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true Add Your Academic Degrees To add an education, include the respective information under degrees section in the education.yaml file as below:\ndegrees: - name: Ph.D in Quantum Cryptography icon: fa-microscope timeframe: 2016-2020 institution: name: ABC University of Technology url: \u0026#34;#\u0026#34; logo: /images/education/college.png # Path of the logo image darkLogo: /images/education/college-dark.png #(optional), if not provided, dark theme will contain \u0026#39;logo\u0026#39; grade: #(optional) scale: CGPA achieved: 3.6 outOf: 4 publications: #(optional) - title: Lorem ipsum dolor sit amet, consectetur adipiscing elit. url: \u0026#34;#\u0026#34; - title: Fusce eu augue ut odio porttitor pulvinar. url: \u0026#34;#\u0026#34; - title: Nullam vitae orci tincidunt purus viverra pulvinar. url: \u0026#34;#\u0026#34; extracurricularActivities: #(optional), supports markdown - Lorem ipsum dolor sit amet, consectetur adipiscing elit. - Fusce eu augue ut odio porttitor pulvinar. custonSections: #(optional) - name: Thesis content: Lorem ipsum dolor sit amet, consectetur adipiscing elit. - name: Supervisor content: Fusce eu augue ut odio porttitor pulvinar. Make sure the icon you are using is available in Font Awesome.\n","date":"June 8, 2020","hero":"/posts/configuration/sections/education/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/education/","summary":"The Education section is designed to showcase your academic background. In this post, we will guide you on how to configure the Education section of your site. For a complete reference, you can refer to the sample education.yaml file.\nTo begin, create a new file named education.yaml in the data/en/sections directory of your site. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your education.yaml file:","tags":null,"title":"Configuring Education Section"},{"categories":null,"contents":"The Experiences section is designed to showcase your career background and highlight the responsibilities you have handled throughout your professional journey. In this post, we will guide you on how to configure the Experiences section of your site. For a complete reference, you can refer to the sample experiences.yaml file.\nTo begin, create a new file named experiences.yaml in the data/en/sections directory of your site. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your experiences.yaml file:\nsection: name: Experiences # Titre de la section (par défaut: \u0026#34;\u0026#34; ) id: experiences # url id/slug of section *Required* enable: true weight: 3 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true Add Your Experiences To add an experience, include the respective information under experiences section in the experiences.yaml file as below:\n# Your experiences experiences: - company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; location: Dhaka Branch logo: /images/experiences/company.png darkLogo: /images/experiences/company-dark.png #(optional), if not provided, dark theme will contain \u0026#39;logo\u0026#39; # company overview overview: Example Co. is a widely recognized company for cloud-native development. It builds tools for Kubernetes. positions: - designation: Senior Software Engineer start: Nov 2019 # don\u0026#39;t provide end date if you are currently working there. It will be replaced by \u0026#34;Present\u0026#34; # end: Dec 2020 # give some points about what was your responsibilities at the company. responsibilities: - Design and develop XYZ tool for ABC task - Design, develop and manage disaster recovery tool [Xtool](https://www.example.com) that backup Kubernetes volumes, databases, and cluster\u0026#39;s resource definition. - Lead backend team. - designation: Junior Software Engineer start: Nov 2017 end: Oct 2019 responsibilities: - Implement and test xyz feature for abc tool. - Support client for abc tool. - Learn k,d,w technology for xyz. Each entry in the experiences section should have the following information:\ncompany: Some information about your company. You should provide name, url, location, logo, and a brief overview of the company. positions: A list of positions you have held in the company. You can provide multiple positions if you have changed your position in the company. designation: Represents the role that you were playing at the position. start: Time when you had joined at the position. end: Time when you have left the position. If you are currently working at the position, don\u0026rsquo;t provide this field. responsibilities: A list of responsibilities you handled at that position. This section is very important as it will give the viewer an idea about the professional responsibilities you are capable to deal with. You can use markdown syntax in overview field of company section and responsibilities field.\n","date":"June 8, 2020","hero":"/posts/configuration/sections/experiences/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/experiences/","summary":"The Experiences section is designed to showcase your career background and highlight the responsibilities you have handled throughout your professional journey. In this post, we will guide you on how to configure the Experiences section of your site. For a complete reference, you can refer to the sample experiences.yaml file.\nTo begin, create a new file named experiences.yaml in the data/en/sections directory of your site. Then, follow the instructions below.","tags":null,"title":"Configuring Experiences Section"},{"categories":null,"contents":"The purpose of the Projects section is to effectively showcase your projects. In this post, we will guide you on how to configure the Projects section on your site. For a complete reference, please refer to the sample projects.yaml file.\nTo begin, create a new file named projects.yaml in the data/en/sections directory of your website. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your projects.yaml file:\n# section information section: name: Projects id: projects enable: true weight: 5 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true Add Project Filtering Buttons Now, add a buttons section in your projects.yaml file as bellow,\nbuttons: - name: All filter: \u0026#34;all\u0026#34; - name: Professional filter: \u0026#34;professional\u0026#34; - name: Academic filter: \u0026#34;academic\u0026#34; - name: Hobby filter: \u0026#34;hobby\u0026#34; Each button has two properties. The first property is name which is the text that will be displayed on the button and the other is filter which specifies the category of the projects this button should select.\nA button will show only those projects that have a tag that matches the text specified in the filter filed. The filter value all is treated specially. It matches all the projects even though they don\u0026rsquo;t have all as a tag in their tags field.\nAdd Your Projects Now, add your projects under the projects section of your projects.yaml file as bellow,\nprojects: - name: Kubernetes logo: images/projects/kubernetes.png role: Contributor timeline: \u0026#34;March 2018 - Present\u0026#34; repo: https://github.com/kubernetes/kubernetes # url: \u0026#34;\u0026#34; summary: Production-Grade Container Scheduling and Management . tags: [\u0026#34;professional\u0026#34;, \u0026#34;kubernetes\u0026#34;, \u0026#34;cloud\u0026#34;] You can specify the following field for a project,\nname: The name of the project. logo: The logo of the project. If the project does not have a logo, the theme will automatically add a placeholder there. role: Your role in the project. timeline: The timeline when you have worked on the project. repo: If the project is an open-source project and hosted on Github, you can provide the repository URL. This will be used to show the star count for the project. url: If the project is not an open-source project or not hosted on Github, you can provide an URL of the project. This will create a button with the link in the project card. summary: A short description of your project. tags: A list of tags for your project. It will be used to select the project under a category by the filtering buttons. You can use markdown syntax in the summary field.\nThe following image shows how the contents of projects.yaml are mapped into the Projects section.\n","date":"June 8, 2020","hero":"/posts/configuration/sections/projects/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/projects/","summary":"The purpose of the Projects section is to effectively showcase your projects. In this post, we will guide you on how to configure the Projects section on your site. For a complete reference, please refer to the sample projects.yaml file.\nTo begin, create a new file named projects.yaml in the data/en/sections directory of your website. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your projects.","tags":null,"title":"Configuring Projects Section"},{"categories":null,"contents":"The Recent Posts section is used to showcase the latest posts from your content. To enable this section, create a recent-posts.yaml file in the data/en/sections directory and include the following content:\n# section information section: name: Recent Posts # Title of section (default: \u0026#34;\u0026#34;) id: recent-posts # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 6 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar hideTitle: true # Can optionally hide the title in sections (default: false) numShow: 4 # Can optionally increase the number of posts to display (default: 3) showMoreButton: false #Can optionally show \u0026#39;More Posts\u0026#39; button (default: false) ","date":"June 8, 2020","hero":"/posts/configuration/sections/recent-posts/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/recent-posts/","summary":"The Recent Posts section is used to showcase the latest posts from your content. To enable this section, create a recent-posts.yaml file in the data/en/sections directory and include the following content:\n# section information section: name: Recent Posts # Title of section (default: \u0026#34;\u0026#34;) id: recent-posts # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 6 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar hideTitle: true # Can optionally hide the title in sections (default: false) numShow: 4 # Can optionally increase the number of posts to display (default: 3) showMoreButton: false #Can optionally show \u0026#39;More Posts\u0026#39; button (default: false) ","tags":null,"title":"Configuring Recent Posts Section"},{"categories":null,"contents":"The Achievements section is designed to display your accomplishments in a visually appealing gallery format. This guide will walk you through the process of configuring the Achievements section on your website. For a complete reference, you can refer to the sample achievements.yaml file.\nTo begin, create a new file named achievements.yaml in the data/en/sections directory of your website. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your achievements.yaml file:\n# section information section: name: Achievements id: achievements enable: true weight: 9 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true Add Your Achievements To add your achievements, open the achievements.yaml file and include the following entries under the achievements section:\nachievements: - title: Best Presenter image: images/sections/achievements/presenter.jpg summary: Best presenter in the 2020 XYZ conference. Each achievements entry should have the following fields,\ntitle: The title of the achievement. image: An image of the achievement. summary: A summary of the achievement. You can use markdown syntax in the summary field.\nThe following image shows how the contents of achievements.yaml are mapped into the Achievements section.\n","date":"June 8, 2020","hero":"/posts/configuration/sections/achievements/hero.svg","permalink":"http://localhost:1313/posts/configuration/sections/achievements/","summary":"The Achievements section is designed to display your accomplishments in a visually appealing gallery format. This guide will walk you through the process of configuring the Achievements section on your website. For a complete reference, you can refer to the sample achievements.yaml file.\nTo begin, create a new file named achievements.yaml in the data/en/sections directory of your website. Then, follow the instructions below.\nAdd Section Information Add the following section metadata to your achievements.","tags":null,"title":"Configuring Achievements Section"},{"categories":null,"contents":"First, we need to understand how to create a post then we will be able to create categories.\nPost Creation To create a post in your blog first you need to go to the folder named posts. Here, create a file _index.md(The file name has to be exactly the same as it is mentioned). Then open the file and add below lines: --- title: Posts --- now, save and close the file. Now, Suppose, you want to write a post. First, create a file, name it with a markdown extension at the end. For example: we\u0026rsquo;ve created a file named analytics-and-comments.md and added the below lines of contents: --- title: \u0026quot;Analytics and Comments\u0026quot; date: 2020-06-08T06:00:23+06:00 hero: /images/posts/writing-posts/analytics.svg description: Adding analytics and disquss comment in hugo theme: Toha menu: sidebar: name: Analytics \u0026amp; Comments identifier: analytics-and-comments weight: 500 --- ### Complete Post Coming Soon... As we know that, the header part of this file which starts and ends with 3 horizontal hyphen(---) is called the front-matter and every blog post that we write needs to be a front matter included there. Let\u0026rsquo;s understand what are the parameters actually mean: title: This is the title of your post. date: This is the time that shows the posting time of your blog. The first portion is in the year-month-date format. You can edit the date and time as you wish. hero: Here, you need to include the location path of the cover photo of your post. Go to the static folder and create a folder named images(If you don\u0026rsquo;t have) then inside this folder create another folder called posts and inside this, we created a folder named writing-posts where we put the image file analytics.svg. Now copy the path and add it to the hero parameter as mentioned above. description: Add any description you like. menu: This section contains another parameter called sidebar which actually displays how the file structure in the sidebar is going to look, and under this we have: name: This defines what would be the name of the document in sidebar file hierarchy identifier: This helps to distinguish the file from other files and helps in terms of category creation. weight: A value is assigned to this param as a weight value and for multiple files, the documents will appear in the file hierarchy based on this weight value in ascending order.\u0026lt;/ after the front-matter, you can write any content following the markdown rules. The following image shows how the contents of analytics-and-comments.md are mapped into the sidebar section. In the above figure- Features, Installation, Configuration, Writing Posts, Customizing, Short Codes, etc are folders created just for other posts.\nCategory Creation As we have created one _index.md file and one blog post markdown file previously, now to create a category, we need to create a folder. We created a folder called getting-started and inside this folder, we again need to create a _index.md file which contains the front-matter as below:\n--- title: Deploy Site menu: sidebar: name: Deploy Site identifier: getting-started weight: 300 --- The meaning of each parameter in the above code block has been discussed earlier. Just, for the time being, keep in mind that we are going to create the category name as getting-started that\u0026rsquo;s why we included it as an identifier in this _index.md file but you can give any name you want. Next, we are going to create a markdown file called github-pages.md which will be our blog post file for this folder. Our github-pages.md includes the following lines:\n--- title: \u0026#34;Deploy site in Github Pages\u0026#34; date: 2020-06-08T06:00:20+06:00 hero: /images/posts/writing-posts/git.svg menu: sidebar: name: Github Pages identifier: getting-started-github parent: getting-started weight: 10 --- ### Complete Post Coming Soon... We already know about the parameters used here, but we have one new parameter this time included which is parent and If we notice we will understand that the value of this param and the value of identifier param in the _index.md file inside this folder are both the same. We have to be careful that both of these parameter value matches. Now, you can add as many posts and categories as you want following the above-mentioned procedure. This is how we create categories. The following image shows how the contents are mapped into the sidebar section. Customizing post\u0026rsquo;s author information By default, the post should use author information from config.yaml. If you want to overwrite the default author information, just add following author section in the front-matter:\nauthor: name: Md.Habibur Rahman image: /images/authors/habib.jpg Your final front-matter should look-like:\ntitle: \u0026#34;Creating Category\u0026#34; date: 2020-06-08T06:15:55+06:00 # hero: images/background/flower.jpg author: name: Md.Habibur Rahman image: /images/authors/habib.jpg menu: sidebar: name: Creating Category identifier: writing-post-category-create parent: writing-post-category weight: 10 ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/posts/writing-posts/organizing/category/","summary":"First, we need to understand how to create a post then we will be able to create categories.\nPost Creation To create a post in your blog first you need to go to the folder named posts. Here, create a file _index.md(The file name has to be exactly the same as it is mentioned). Then open the file and add below lines: --- title: Posts --- now, save and close the file.","tags":null,"title":"Creating Category"},{"categories":null,"contents":"Complete Post Coming Soon\u0026hellip; ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/posts/writing-posts/organizing/sub-category/example/","summary":"Complete Post Coming Soon\u0026hellip; ","tags":null,"title":"Creating Sub Category"},{"categories":null,"contents":"Complete Post Coming Soon\u0026hellip; ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/posts/writing-posts/front-matter/","summary":"Complete Post Coming Soon\u0026hellip; ","tags":null,"title":"Front Matter"},{"categories":null,"contents":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/posts/writing-posts/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":null,"title":"Markdown Syntax Guide"},{"categories":null,"contents":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files. Note: Use the online reference of Supported TeX Functions Examples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"June 8, 2020","hero":"/posts/writing-posts/math/hero.svg","permalink":"http://localhost:1313/posts/writing-posts/math/","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","tags":null,"title":"Math Type Settings"},{"categories":null,"contents":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nInstagram Simple Shortcode YouTube Privacy Enhanced Shortcode Twitter Simple Shortcode Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 Vimeo Simple Shortcode ","date":"June 8, 2020","hero":"/posts/writing-posts/rich-content/hero.svg","permalink":"http://localhost:1313/posts/writing-posts/rich-content/","summary":"\u003cp\u003eHugo ships with several \u003ca href=\"https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes\" target=\"_blank\" rel=\"noopener\"\u003eBuilt-in Shortcodes\u003c/a\u003e for rich content, along with a \u003ca href=\"https://gohugo.io/about/hugo-and-gdpr/\" target=\"_blank\" rel=\"noopener\"\u003ePrivacy Config\u003c/a\u003e and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\u003c/p\u003e","tags":null,"title":"Rich Content"},{"categories":null,"contents":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }","date":"June 8, 2020","hero":"/posts/writing-posts/using-emoji/hero.svg","permalink":"http://localhost:1313/posts/writing-posts/using-emoji/","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","tags":null,"title":"Using Emoji"},{"categories":null,"contents":"Analytics This theme has built in support for various analytic tools. Currently, it supports the following analytics:\nGoatCounter counter.dev Google Analytics Matomo For a complete list of supported analytics, please refer the sample config.yaml file.\nWarning: When adding analytics, you should consider local legislation to see if a privacy banner is required to inform users of the tracking in personal data. In general (not legal advice), privacy-friendly, anonymous methods such as counter.dev and GoatCounter don\u0026rsquo;t need a banner, since they do not collect personally identifiable data. Goat Counter GoatCounter is the most complete, simple and privacy friendly analytics method supported in Toha. Its script tracks the most viewed pages, total number of users, devices, and much more, all while being open source!\nTo enable GoatCounter analytics in your site, you have two options: one is to sign in at goatcounter.com and obtain a code for your site, the second is to self-hosted an instance of GoatCounter. Then, you have to add analytics section under params.features section of your config.yaml file as below:\nanalytics: enable: true services: # GoatCounter goatCounter: code: \u0026lt;your GoatCounter code\u0026gt; # Not self-hosted instance: \u0026lt;your GoatCounter instance url\u0026gt; # For self-hosted you should use only one of the two methods counter.dev counter.dev is a simple, privacy friendly and open source analytics website which enables you to track the total user count, first visited page and some other metrics on your website. Unfortunately, to keep things simple (and free) they don\u0026rsquo;t show a ranking of the most visited pages, but rather the ones that are accessed the first.\nYou can enable it by adding the email you registered with at counter.dev\u0026rsquo;s page under params.features section in your config.yaml as below:\nanalytics: enable: true services: counterDev: id: \u0026lt;your counter.dev id\u0026gt; The tracking code will be automatically added to your site.\nNote: On some sites, an error has been detected where only the root directory (\u0026quot;/\u0026quot;) is passed over to counter.dev, so the tracking wont show anything under the \u0026ldquo;pages\u0026rdquo; section. To fix this, one can add referrerPolicy: no-referrer-when-downgrade as a parameter on the \u0026ldquo;counterDev\u0026rdquo; section, ensuring that new page visits are always correctly passed onto counter.dev. Google Analytics Beware that according to recent case law, Google Analytics might be illegal in the European Union You can enable Google Analytics in your site by adding your tracking id under params.features section in your config.yaml file as below:\nanalytics: enable: true services: # Google Analytics google: id: \u0026lt;your Google Analytics tracking id\u0026gt; You can use both V3 or V4 tracking ID. The theme will automatically detect the tracking code version and add the respective tracking scripts accordingly to your site.\nFor additional privacy settings regarding Google Analytics, you can provide privacy.googleAnalytics section in your config.yaml file as described here.\nMatomo You can enable Matomo (formerly Piwik) by adding the matomo configuration under params.features section in the config.yaml file as shown below:\nanalytics: enable: true services: # Matomo / Piwik matomo: instance: matomo.example.com siteId: 1 # The number generated after adding a site in your instance ","date":"June 8, 2020","hero":"/posts/analytics/hero.svg","permalink":"http://localhost:1313/posts/analytics/","summary":"Analytics This theme has built in support for various analytic tools. Currently, it supports the following analytics:\nGoatCounter counter.dev Google Analytics Matomo For a complete list of supported analytics, please refer the sample config.yaml file.\nWarning: When adding analytics, you should consider local legislation to see if a privacy banner is required to inform users of the tracking in personal data. In general (not legal advice), privacy-friendly, anonymous methods such as counter.","tags":null,"title":"Analytics"}]